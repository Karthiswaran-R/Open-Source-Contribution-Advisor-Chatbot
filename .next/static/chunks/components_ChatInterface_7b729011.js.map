{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/Karthi/open-source-chatbot/components/ChatInterface.js"],"sourcesContent":["'use client';\nimport { useState } from 'react';\nimport ChatForm from './ChatForm'; // Make sure this component exists and handles input correctly\n\nexport default function ChatInterface() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Send message to the server (for bot response)\n  const handleSendMessage = async (message) => {\n    setMessages((prev) => [...prev, { from: 'user', text: message }]);\n    setLoading(true);\n\n    try {\n      const res = await fetch('/api/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ input: message }),\n      });\n\n      if (!res.ok) {\n        throw new Error('Failed to fetch');\n      }\n\n      const data = await res.json();\n      setMessages((prev) => [\n        ...prev,\n        { from: 'bot', text: data.output || 'No response generated.' },\n      ]);\n    } catch (err) {\n      console.error('Error:', err);\n      setMessages((prev) => [\n        ...prev,\n        { from: 'bot', text: '⚠️ Failed to reach the server.' },\n      ]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 700, margin: '0 auto', padding: 20 }}>\n      <h2 style={{ textAlign: 'center' }}>Open Source Advisor</h2>\n      <div\n        style={{\n          height: 400,\n          overflowY: 'auto',\n          backgroundColor: '#eee',\n          padding: 10,\n          borderRadius: 10,\n          marginBottom: 20,\n        }}\n      >\n        {messages.map((msg, i) => (\n          <div\n            key={i}\n            style={{\n              textAlign: msg.from === 'user' ? 'right' : 'left',\n              margin: '10px 0',\n            }}\n          >\n            <span\n              style={{\n                display: 'inline-block',\n                backgroundColor: msg.from === 'user' ? '#d1f7ff' : '#fff',\n                padding: 10,\n                borderRadius: 10,\n                maxWidth: '80%',\n              }}\n            >\n              {msg.text}\n            </span>\n          </div>\n        ))}\n      </div>\n      <ChatForm onSendMessage={handleSendMessage} disabled={loading} />\n    </div>\n  );\n}\n\n"],"names":[],"mappings":";;;;AACA;AACA,4MAAmC,8DAA8D;;;AAFjG;;;AAIe,SAAS;;IACtB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,gDAAgD;IAChD,MAAM,oBAAoB,OAAO;QAC/B,YAAY,CAAC,OAAS;mBAAI;gBAAM;oBAAE,MAAM;oBAAQ,MAAM;gBAAQ;aAAE;QAChE,WAAW;QAEX,IAAI;YACF,MAAM,MAAM,MAAM,MAAM,aAAa;gBACnC,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE,OAAO;gBAAQ;YACxC;YAEA,IAAI,CAAC,IAAI,EAAE,EAAE;gBACX,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,OAAO,MAAM,IAAI,IAAI;YAC3B,YAAY,CAAC,OAAS;uBACjB;oBACH;wBAAE,MAAM;wBAAO,MAAM,KAAK,MAAM,IAAI;oBAAyB;iBAC9D;QACH,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,UAAU;YACxB,YAAY,CAAC,OAAS;uBACjB;oBACH;wBAAE,MAAM;wBAAO,MAAM;oBAAiC;iBACvD;QACH,SAAU;YACR,WAAW;QACb;IACF;IAEA,qBACE,0JAAC;QAAI,OAAO;YAAE,UAAU;YAAK,QAAQ;YAAU,SAAS;QAAG;;0BACzD,0JAAC;gBAAG,OAAO;oBAAE,WAAW;gBAAS;0BAAG;;;;;;0BACpC,0JAAC;gBACC,OAAO;oBACL,QAAQ;oBACR,WAAW;oBACX,iBAAiB;oBACjB,SAAS;oBACT,cAAc;oBACd,cAAc;gBAChB;0BAEC,SAAS,GAAG,CAAC,CAAC,KAAK,kBAClB,0JAAC;wBAEC,OAAO;4BACL,WAAW,IAAI,IAAI,KAAK,SAAS,UAAU;4BAC3C,QAAQ;wBACV;kCAEA,cAAA,0JAAC;4BACC,OAAO;gCACL,SAAS;gCACT,iBAAiB,IAAI,IAAI,KAAK,SAAS,YAAY;gCACnD,SAAS;gCACT,cAAc;gCACd,UAAU;4BACZ;sCAEC,IAAI,IAAI;;;;;;uBAfN;;;;;;;;;;0BAoBX,0JAAC,kHAAA,CAAA,UAAQ;gBAAC,eAAe;gBAAmB,UAAU;;;;;;;;;;;;AAG5D;GA1EwB;KAAA","debugId":null}}]
}